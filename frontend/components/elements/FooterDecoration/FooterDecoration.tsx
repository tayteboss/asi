import { useState, useEffect, useMemo, useRef } from 'react';
import styled from 'styled-components';
import { AnimationControls, motion, useAnimation } from 'framer-motion';

type Props = {
	isHovered: boolean;
};

const FooterDecorationWrapper = styled.div`
	width: 100%;

	svg {
		width: 100%;
		height: auto;
	}
`;

const paths: string[] = [
	'M188.73 71.2637C188.677 84.128 178.871 94.2683 165.989 94.778C153.019 95.2877 143.968 102.704 141.631 114.76C141.086 117.554 141.42 120.419 140.875 123.231C138.731 134.672 127.624 143.318 116.183 142.316C103.53 141.209 94.0574 131.438 93.9168 119.347C93.7587 105.674 103.424 95.5688 117.22 94.9889C129.03 94.4792 138.186 87.3265 140.682 76.6238C144.162 61.7209 133.072 47.7142 117.519 47.3978C105.692 47.1518 96.6057 39.5422 94.2683 27.9432C91.7552 15.4655 100.244 2.93502 112.844 0.457054C125.849 -2.09121 138.45 6.2917 140.84 19.0154C141.35 21.7395 141.086 24.5162 141.543 27.2226C143.546 38.9622 152.668 46.9233 164.794 47.3978C170.98 47.6439 176.481 49.4365 181.067 53.6894C186.182 58.4345 188.712 64.3043 188.695 71.2812',
	'M0 69.5412C0 56.6769 10.4215 46.2554 23.2859 46.2554C36.1502 46.2554 46.5717 56.6769 46.5717 69.5412C46.5717 82.4056 36.1502 92.8271 23.2859 92.8271C10.4215 92.8271 0 82.4056 0 69.5412Z',
	'M60.5432 69.5412C60.5432 56.6769 70.9647 46.2554 83.8291 46.2554C96.6934 46.2554 107.115 56.6769 107.115 69.5412C107.115 82.4056 96.6934 92.8271 83.8291 92.8271C70.9647 92.8271 60.5432 82.4056 60.5432 69.5412Z',
	'M758.733 71.2637C758.68 84.128 748.874 94.2683 735.992 94.778C723.022 95.2877 713.971 102.704 711.634 114.76C711.089 117.554 711.423 120.419 710.878 123.231C708.734 134.672 697.627 143.318 686.186 142.316C673.533 141.209 664.06 131.438 663.92 119.347C663.762 105.674 673.427 95.5688 687.223 94.9889C699.033 94.4792 708.189 87.3265 710.702 76.6238C714.182 61.7209 703.093 47.7142 687.54 47.3978C675.712 47.1518 666.626 39.5422 664.289 27.9432C661.776 15.4655 670.264 2.93502 682.865 0.457054C695.87 -2.09121 708.47 6.2917 710.861 19.0154C711.37 21.7395 711.107 24.5162 711.564 27.2226C713.567 38.9622 722.688 46.9233 734.814 47.3978C741 47.6439 746.501 49.4365 751.088 53.6894C756.202 58.4345 758.733 64.3043 758.715 71.2812',
	'M570.003 69.5412C570.003 56.6769 580.425 46.2554 593.289 46.2554C606.154 46.2554 616.575 56.6769 616.575 69.5412C616.575 82.4056 606.154 92.8271 593.289 92.8271C580.425 92.8271 570.003 82.4056 570.003 69.5412Z',
	'M630.546 69.5412C630.546 56.6769 640.968 46.2554 653.832 46.2554C666.696 46.2554 677.118 56.6769 677.118 69.5412C677.118 82.4056 666.696 92.8271 653.832 92.8271C640.968 92.8271 630.546 82.4056 630.546 69.5412Z',
	'M323.471 52.9687C324.737 52.9335 326.02 52.7578 327.285 52.5645C339.235 50.7895 347.601 39.0499 345.492 27.117C343.313 14.8853 331.573 6.69572 319.675 9.08582C308.691 11.3002 302.031 19.5425 301.503 31.5808C301.029 42.6702 292.47 51.8439 281.662 52.8633C270.52 53.9001 260.52 46.6947 257.867 35.7635C257.269 33.3207 257.392 30.8427 257.128 28.3823C255.81 16.3616 245.688 8.06651 233.21 8.8222C221.98 9.49003 212.947 19.5249 213.14 31.0712C213.369 43.5313 222.771 52.6524 235.758 53.0038C246.373 53.285 255.09 60.8771 256.988 71.3689C257.339 73.2845 257.216 75.2001 257.375 77.0981C257.076 89.4528 247.884 98.6441 235.459 99.0484C234.177 99.0835 232.911 99.2592 231.646 99.4526C219.713 101.228 211.33 112.967 213.457 124.9C215.636 137.132 227.375 145.321 239.273 142.931C250.257 140.717 256.918 132.475 257.427 120.436C257.902 109.347 266.46 100.173 277.269 99.1538C277.954 99.0835 278.639 99.0659 279.307 99.0484L279.342 98.8902C279.448 98.8902 279.553 98.8902 279.659 98.8902C291.574 98.8902 301.24 89.2946 301.363 77.4145C301.468 76.6412 301.521 75.8504 301.539 75.0419C301.785 62.6345 310.976 53.3729 323.454 52.9511',
	'M324.104 99.9272C312.118 99.9272 302.4 109.646 302.4 121.631C302.4 133.617 312.118 143.336 324.104 143.336C336.09 143.336 345.808 133.617 345.808 121.631C345.808 109.646 336.09 99.9272 324.104 99.9272Z',
	'M892.226 52.9687C893.492 52.9335 894.775 52.7578 896.04 52.5645C907.99 50.7895 916.373 39.0499 914.247 27.117C912.068 14.8853 900.328 6.69572 888.43 9.08582C877.446 11.3002 870.786 19.5425 870.276 31.5808C869.802 42.6702 861.243 51.8439 850.435 52.8633C839.293 53.9001 829.293 46.6947 826.639 35.7635C826.042 33.3207 826.165 30.8427 825.901 28.3823C824.583 16.3616 814.46 8.06651 801.983 8.8222C790.753 9.49003 781.72 19.5249 781.913 31.0712C782.141 43.5313 791.544 52.6524 804.531 53.0038C815.146 53.285 823.863 60.8771 825.761 71.3689C826.112 73.2845 825.989 75.2001 826.147 77.0981C825.848 89.4528 816.675 98.6441 804.232 99.0484C802.949 99.0835 801.684 99.2592 800.419 99.4526C788.468 101.228 780.085 112.967 782.212 124.9C784.391 137.132 796.13 145.321 808.028 142.931C819.012 140.717 825.673 132.475 826.182 120.436C826.657 109.347 835.216 100.173 846.024 99.1538C846.709 99.0835 847.394 99.0659 848.062 99.0484L848.097 98.8902C848.203 98.8902 848.308 98.8902 848.414 98.8902C860.329 98.8902 869.995 89.2946 870.118 77.4145C870.206 76.6412 870.276 75.8504 870.294 75.0419C870.54 62.6345 879.731 53.3729 892.209 52.9511',
	'M892.859 99.9272C880.874 99.9272 871.155 109.646 871.155 121.631C871.155 133.617 880.874 143.336 892.859 143.336C904.845 143.336 914.564 133.617 914.564 121.631C914.564 109.646 904.845 99.9272 892.859 99.9272Z',
	'M1338.3 98.9961C1326.31 98.9961 1316.59 108.715 1316.59 120.7C1316.59 132.686 1326.31 142.404 1338.3 142.404C1350.28 142.404 1360 132.686 1360 120.7C1360 108.715 1350.28 98.9961 1338.3 98.9961Z'
];

const getRandomIndices = (numPaths: number, max: number): number[] => {
	const indices = new Set<number>();
	while (indices.size < numPaths) {
		indices.add(Math.floor(Math.random() * max));
	}
	return Array.from(indices);
};

const FooterDecoration = ({ isHovered }: Props) => {
	const animations = useRef<AnimationControls[]>(
		paths.map(() => useAnimation())
	);

	useEffect(() => {
		if (paths.length === 0) return;

		if (isHovered) {
			const numPaths = Math.floor(Math.random() * 5) + 1; // Randomly choose between 1 and 3 paths
			const randomIndices = getRandomIndices(numPaths, paths.length);
			animations.current.forEach((animation, index) => {
				animation.start({
					fill: randomIndices.includes(index)
						? 'var(--colour-lime)'
						: 'var(--colour-black)'
				});
			});
		} else {
			animations.current.forEach((animation) => {
				animation.start({ fill: 'var(--colour-black)' });
			});
		}
	}, [isHovered]);

	return (
		<FooterDecorationWrapper>
			<svg
				width="1360"
				height="143"
				viewBox="0 0 1360 143"
				fill="none"
				xmlns="http://www.w3.org/2000/svg"
			>
				<g clipPath="url(#clip0_291_1034)">
					{paths.map((d, index) => (
						<motion.path
							key={index}
							d={d}
							animate={animations.current[index]}
							initial={{ fill: 'var(--colour-black)' }}
						/>
					))}
				</g>
				<defs>
					<clipPath id="clip0_291_1034">
						<rect width="1360" height="143" fill="white" />
					</clipPath>
				</defs>
			</svg>
		</FooterDecorationWrapper>
	);
};

export default FooterDecoration;
